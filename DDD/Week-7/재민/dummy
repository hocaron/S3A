# [DDD] 박재민 11~12장

# 11장. 진화하는 설계 의사결정

소프트웨어 프로젝트 환경의 변화가 소프트웨어 설계 의사결정에 어떻게 영향을 미칠 수 있는지와 그에 따라 설계를 발전시키는 방법에 대해 알아보자

---

## 도메인 변경

세 가지 유형의 비즈니스 하위 도메인

**핵심**

- 기업이 경쟁 우위를 확보하기 위해 경쟁자와 다르게 수행하는 활동

**지원**

- 회사가 경쟁자와 다르게 하고 있지만 경쟁 우위를 제공하지 않는 활동

**일반**

- 모든 회사가 같은 방식으로 하는 일

실행 중인 하위 **도메인 유형이** **전략적 및 전술적 설계 의사결정에 영향을 미치는 것**

- 바운디드 컨텍스트의 경계를 설계하는 방법
- 컨텍스트 간의 연동을 조율하는 방법
- 복잡한 비즈니스 로직을 다루기 위해 사용할 디자인 패턴

→ 조직이 성장하고 발전함에 따라 일부 하위 도메인의 유형이 변화 하는 것은 흔한 일이며 몇가지 예를 살펴보자.

### 핵심에서 일반으로

이전에 경쟁 우위로 간주했던 것이 모든 경쟁업체가 사용할 수 있는 상품이 된 경우

### 일반에서 핵심으로

- 상용 솔루션을 자체 구현으로 교체 해 그 기능을 성공적으로 구현해 다른 경쟁업체보다 경쟁 우위를 확보한 경우
- 좋은 예제로 아마존이 있음. 아마존은 서비스를 실행할 인프라가 필요해 인프라를 관리하는 방식을 ‘재창조’하였고 나중에 이를 수익성 있는 비즈니스로 전환했음.

### 지원에서 일반으로

사내에서 사내 솔루션으로 구현한 기능에 더불어 더 고급 기능을 포함하는 오픈소스 프로젝트 등으로 변경되어 회사가 사내 솔루션을 버리고 오픈 소스 솔루션과 연동하는 경우

### 지원에서 핵심으로

회사에서 비용을 줄이거나 추가 수익을 창출하는 방식으로 지원 로직을 최적화 하는 방법을 찾는 경우. 이러한 전조 증상은 하위 도메인의 비즈니스 로직이 점점 더 복잡해지는 것임.

### 핵심에서 지원으로

하위 도메인의 복잡성이 정당화되지 않을 때 발생할 수 있음. 즉, 복잡성에 비해 수익성이 없는 경우

### 일반에서 지원으로

지원에서 일반으로 전환된 경우처럼 연동한 오픈 소스 솔루션의 복잡성 대비 얻는 이점을 정당화 할 수 없는 경우 회사는 다시 사내 개발 솔루션으로 전환할 수 있음. 이런 경우 전환이 일어남.

---

## 전략적 설계 문제

- 하위 도메인 유형의 변경은 BC에 직접적인 영향을 미치고 결과적으로 전략적 설계 의사결정에도 영향을 준다.
- 4장에서 배웠듯 다양한 BC 연동 패턴은 다양한 하위 도메인 유형을 준다.
- 이러한 변경의 영향을 받는 또 다른 통합 패턴은 분리형 노선이다
    - 지원 하위 도메인과 일반 하위 도메인에 이 패턴을 사용할 수 있다
    - 하위 도메인이 핵심 하위 도메인으로 변형되는 경우 여러 팀에허 해당 기능을 복제할 수 없기에 해당 팀들은 그들의 솔루션을 이 핵심 하위 도메인과 연동할 수 밖에 없고, 핵심 하위 도메인은 한 팀에서만 구현되기에 사용자-제공자 관계가 가장 적합하다
- 구현 전략의 관점에서 핵심 하위 도메인과 지원 하위 도메인은 구현 방법이 다르다
    - 지원 하위 도메인은 외부 위탁이나 신규 입사자를 위한 ‘훈련용 도구’로 사용할 수 있다
    - 핵심 하위 도메인은 도메인 지식의 원천에 가깝게 하기 위해 사내 개발해야 한다. 이같은 논리는 반대로도 작동한다.

---

## 전술적 설계 문제

- 하위 도메인의 유형 변경을 나타내는 주요 지표는 기존의 기술적 설계가 현재 비즈니스 요구사항을 지원할 수 없는 경우이다
- 지원 하위 도메인이 핵심 하위 도메인이 되는 예로 돌아가보면 지원 하위 도메인은 비교적 단순한 디자인 패턴으로 구현하는데 시간이 지남에 따라 복잡한 규칙과 불변성이 비즈니스 로직에 추가되면 기존에 사용하던 디자인 패턴 위에 새로운 기능을 추가하는 것은 고통스러운 일이다. 이 **고통**이 중요한 신호이며, 비즈니스 도메인과 설계 의사결정을 재평가하기 위한 신호다
- 구현 전략에 변화가 필요하다는 것은 두려운 것이 아니고 자연스러운 일이다
- 비즈니스는 예측 불가능하며 모든 유형의 하위 도메인에 가장 정교한 디자인 패턴을 적용할 수 없다

## 디자인 패턴 마이그레이션의 예시 들

### 트랜잭션 스크립트에서 액티브 레코드로

트랜잭션 스크립트와 액티브 레코드는 모두 절차지향 스크립트를 사용한다. 이 둘의 차이는 자료구조를 모델링하는 방식에 있다. 액티브 레코드 패턴은 저장 장치에 매핑하면서 발생하는 복잡성을 자료구조를 사용해 캡슐화 한다. 결과적으로 트랜잭션 스크립트에서 데이터 작업이 어려워지면 그것을 액티브 레코드로 리팩터링하자.

### 액티브 레코드에서 도메인 모델로

- 액티브 레코드를 조작하는 비즈니스 로직이 점점 더 복잡해지고 불일치 및 중복 사례가 많아지면 도메인 모델 패턴으로 리팩터링하자.
    - 밸류 오브젝트를 식별해 불변 객체로 모델링할 수 있는 자료구조를 찾고 관련된 비즈니스 로직을 찾아 밸류 오브젝트의 일부로 만들자
    - 자료구조를 분석하고 트랜잭션 경계를 찾아라
    - 모든 상태 수정 비즈니스 로직이 그에 상응하는 객체의 경계 내부로 이동할 때 비즈니스 규칙과 불변성을 지속적으로 확인하기 위해 어떤 계층이 필요한지 검토하라. 그것은 애그리게이트의 좋은 후보다.
    - 애그리게이트 설계 원칙을 염두에 두고 가장 작은 트랜잭션 경계, 즉 강한 일관성을 유지하는 데 필요한 최소 데이터를 찾아라
    - 각 애그리게이트에 대해 루트 또는 퍼블릭 인터페이스의 엔드포인트를 식별한다

### 도메인 모델에서 이벤트 소싱 도메인 모델로

- 애그리게이트 경계가 적절하게 설계된 도메인 모델이 있으면 이벤트 소싱 모델로 전환할 수 있다
- 애그리게이트의 데이터를 직접 수정하는 대신 애그리게이트의 수명주기를 나타내는 데 필요한 도메인 이벤트를 모델링한다
- 도메인 모델을 이벤트 소싱 도메인 모델로 리팩터링할 때 가장 어려운 점은 기존 애그리게이트의 이력이므로 과거 이벤트를 생성하거나 마이그레이션 이벤트를 모델링해야 한다

### 전환에 필요한 과거 이력 생성

- 각 애그리게이트를 위한 대략적인 이벤트 스트림을 생성해서, 변환된 모델이 생성된 이벤트 스트림을 프로젝션해서 원래 구현과 동일한 상태를 나타내게 한다
- 이벤트 소싱을 사용하는 목표는 애그리게이트의 도메인 이벤트에 대해 안정적이고 강한 일관성을 가진 이력을 보유 하는 것인데 이 방식은 상태 전환의 전체 히스토리를 복구하는 것이 불가능하다.

### 마이그레이션 이벤트 모델링

- 위 방법의 대안으로 과거 이벤트에 대한 지식 부족을 인정하고, 명시적으로 이벤트를 모델링하는 방법이다
- 현재 상태로 이어질 수 있는 모든 이벤트를 복구하는 대신 마이그레이션 이벤트를 정의하고 기존 애그리게이트 인스턴스의 이벤트 스트림을 초기화 한다
- 장점은 과거 데이터의 부족함을 명확히 하는 것이다
- 단점은 레거시 시스템의 흔적이 이벤트 스토어에 영원히 남는다는 것이다

---

## 조직 변화

- 조직 구조의 변화는 팀 의사소통 및 협업 수준에 영향을 미치고 결과적으로 BC를 통합하는 방식에 영향을 준다.
- 기존 BC에 대한 작업이 다른 지역으로 이동하면 팀의 협업에 부정적인 영향을 줄 수 있어 BC의 연동 패턴이 그에 맞게 진화해야 한다

### 파트너십에서 사용자-제공자로

- 파트너십 패턴은 팀 간의 강력한 의사소통과 협업을 전제로 한다
- 시간이 지남에 따라 이런 전제가 없어질 경우 팀 의사소통에 부정적인 영향을 주며 파트너십 패턴에서 사용자-제공자 관계를 이동하는 것이 적절하다

### 사용자-제공자에서 분리형 노선으로

- 지리적 거리나 조직 내부 정치로 인해 팀에 심각한 의사소통 문제가 생기는 경우 팀은 시간이 지남에 따라 통합 문제를 겪게 되어 이 경우 기능을 복제하는 것이 더 효과적일 수 있다

---

## 도메인 지식

- 도메인 주도 설계의 핵심 신조는 성공적인 소프트웨어 시스템 설계하는 데 도메인 지식이 반드시 필요하다는 것이다
    - 핵심 하위 도메인은 로직이 복잡할 뿐 아니라 자주 변경된며 모델링은 지속적인 과정이다.
    - 비즈니스 도메인에 대한 더 많은 지식을 습득함에 따라 모델을 개선해야 한다
- 비즈니스 도메인의 복잡성은 잘 드러나지 않을 때가 많다
    - 처음에는 모든 것이 간단하고 쉬워 보여도 기능이 추가됨에 따라 점점 더 많은 엣지 케이스, 불변성, 규칙이 발견된다
- 전략적 설계 관점에서 볼 때 도메인 지식 수준에 따라 BC의 경계를 설계하는 것은 유용한 휴리스틱이다
    - 시스템을 잘못된 바운디드 컨텍스트로 분해하면 시간이 지날수록 유지보수 비용이 증가한다
    - 도메인 로직이 불명확하고 자주 변경하는 경우 BC를 더 넓은 경계로 설계하자
    - 시간이 지남에 따라 도메인 지식이 발견되고 비즈니스 로직의 변경사항이 안정화되면 넓은 BC를 작은 BC 또는 마이크로서비스로 분해할 수 있다
- 새로운 도메인 지식이 발견되면 이를 활용해 설계를 발전시키고 회복성을 높여야 한다

---

## 성장

- 성장은 시스템이 건강하다는 신호다
    - 새로운 기능이 지속해서 추가된다는 것은 경쟁 제품에 뒤지지 않게 확장한다는 뜻이다
    - 반대로 프로젝트가 성장함에 따라 해당 코드베이스는 **커다란 진흙 덩어리**로 성장할 수 있다
- 커다란 진흙 덩어리를 초래하는 규제 없는 성장은 설계의 의사결정을 재평가하지 않고 소프트웨어 시스템의 기능을 확장한 결과다
- 성장에 따른 복잡성을 다루는 기본 원칙은 우발적 복잡성 즉, 오래된 설계의 결정으로 발생한는 복잡성을 식별하고 제거하는 것이다

→ 성장 중심의 복잡성을 다루기 위해 비즈니스 도메인과 전략적 구성요소를 분석하고 비즈니스 도메인과 관련된 모델을 설계한 후 코드에서 해당 모델을 설계하고 구현하는 프로세스를 적용해보자.

### 하위 도메인

- 하위 도메인의 경계는 식별하기 어려울 수 있으며, 결과적으로 유용한 경계를 찾기 위해 노력해야 한다
- 비즈니스 도메인이 성장함에 따라 하위 도메인의 경계가 흐려질 수 있기에 여러 개로 세분화된 하위 도메인에 걸쳐있는 하위 도메인은 식별하기 어렵다
    - 따라서 이미 식별된 하위 도메인을 다시 확인하고 응집된 유스케이스에서 휴리스틱을 활용해 하위 도메인을 나누는 지점을 다시 식벼하는 것이 중요하다
- 추출하고 명시적으로 만들 수 있는 내부 하위 도메인을 식별해 핵심 하위 도메인을 최대한 추출해야 한다

### 바운디드 컨텍스트

- 바운디드 컨텍스트 패턴을 통해 비즈니스 도메인의 다양한 모델을 사용할 수 있다. 특정 문제 해결에 초점을 맞춘 모델을 만들 수 있다
- 프로젝트가 발전하고 성장함에 따라 BC가 초점을 잃고 우발적 복잡성이 추가될 수 있다
    - 하위 도메인과 마찬가지로 경계를 때때로 다시 살펴보자
    - 특정 문제를 해결하는 데 초점을 맞춘 BC를 추출해 모델을 단순화할 수 있는 기회를 항상 찾아라
- 성장은 기존의 암시적 설계 문제를 명확하게 만들 수 있다
    - BC가 다른 BC를 호출하지 않고는 작업을 완료할 수 없을 경우 이는 비효율적인 모델의 강력한 신호이다
    - 이때 BC의 경계를 재설계해 각각의 자율성을 높여야 한다

### 애그리게이트

- 경험상 애그리게이트는 가능한 한 작게 유지하고, 비즈니스 도메인에서 강력하게 일관적인 상태를 유지해야 하는 객체만 포함한다.
- 위의 원칙을 지키지 않고 이미 있는 애그리게이트에 새로운 기능을 배포하는 것이 편할 수 있다
    - 비즈니스 로직에 따라 강력하게 일관성을 유지할 필요가 없는 데이터까지 포함되면서 커진다면 이는 제거해야 하는 우발적 복잡성이다
- 비즈니스 기능을 전담 애그리게이트로 추출하면 원래 애그리게이트가 단순해질 뿐 아니라 잠재적으로 해당 애그리게이트가 속한 BC도 단순해진다.
    - 이러한 리팩터링을 통해 일단 드러나면 또 하나의 BC로 추출해야 할 숨겨진 모델이 발견될 때가 많다